package Vista.Ventanas;

import Controlador.Conexion;
import Controlador.gestionCol;
import Controlador.gestionCom;
import Controlador.gestionLib;
import Modelo.Coleccion;
import Modelo.Comic;
import java.io.File;
import javax.swing.JDialog;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import java.sql.SQLException;
import java.util.HashMap;

/**
 *
 * @author luisvi
 */
public class Informes extends javax.swing.JDialog {

    /**
     * Creates new form ReportsDlg
     */
    private File file;
    private String directorioInformes;
    
    public Informes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        directorioInformes = "./Informes";
        file = new File(directorioInformes);
        loadCombos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnListCom = new javax.swing.JButton();
        cmbListCol = new javax.swing.JButton();
        btnCom = new javax.swing.JButton();
        btnCol = new javax.swing.JButton();
        cmbComic = new javax.swing.JComboBox<>();
        cmbColeccion = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Ventana Informes");
        setMaximumSize(new java.awt.Dimension(960, 420));
        setMinimumSize(new java.awt.Dimension(434, 120));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        btnListCom.setBackground(new java.awt.Color(51, 51, 51));
        btnListCom.setForeground(new java.awt.Color(255, 255, 255));
        btnListCom.setText("Imprimir listado de comics");
        btnListCom.setMaximumSize(new java.awt.Dimension(208, 32));
        btnListCom.setMinimumSize(new java.awt.Dimension(208, 32));
        btnListCom.setPreferredSize(new java.awt.Dimension(208, 32));
        btnListCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListComActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnListCom, gridBagConstraints);

        cmbListCol.setBackground(new java.awt.Color(51, 51, 51));
        cmbListCol.setForeground(new java.awt.Color(255, 255, 255));
        cmbListCol.setText("Imprimir listado de colecciones");
        cmbListCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbListColActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cmbListCol, gridBagConstraints);

        btnCom.setBackground(new java.awt.Color(51, 51, 51));
        btnCom.setForeground(new java.awt.Color(255, 255, 255));
        btnCom.setText("Info del comic");
        btnCom.setMaximumSize(new java.awt.Dimension(208, 32));
        btnCom.setMinimumSize(new java.awt.Dimension(208, 32));
        btnCom.setPreferredSize(new java.awt.Dimension(208, 32));
        btnCom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnCom, gridBagConstraints);

        btnCol.setBackground(new java.awt.Color(51, 51, 51));
        btnCol.setForeground(new java.awt.Color(255, 255, 255));
        btnCol.setText("Comics por colecci√≥n");
        btnCol.setMaximumSize(new java.awt.Dimension(208, 32));
        btnCol.setMinimumSize(new java.awt.Dimension(208, 32));
        btnCol.setPreferredSize(new java.awt.Dimension(208, 32));
        btnCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnColActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(btnCol, gridBagConstraints);

        cmbComic.setMaximumSize(new java.awt.Dimension(208, 32));
        cmbComic.setMinimumSize(new java.awt.Dimension(208, 32));
        cmbComic.setPreferredSize(new java.awt.Dimension(208, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cmbComic, gridBagConstraints);

        cmbColeccion.setMaximumSize(new java.awt.Dimension(208, 32));
        cmbColeccion.setMinimumSize(new java.awt.Dimension(208, 32));
        cmbColeccion.setPreferredSize(new java.awt.Dimension(208, 32));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cmbColeccion, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListComActionPerformed
        listadoComics();
    }//GEN-LAST:event_btnListComActionPerformed

    private void cmbListColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbListColActionPerformed
        listadoColecciones();
    }//GEN-LAST:event_cmbListColActionPerformed

    private void btnComActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComActionPerformed
        mostrarComic();
    }//GEN-LAST:event_btnComActionPerformed

    private void btnColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnColActionPerformed
        mostrarComicPorColeccion();
    }//GEN-LAST:event_btnColActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Informes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Informes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Informes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Informes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Informes dialog = new Informes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCol;
    private javax.swing.JButton btnCom;
    private javax.swing.JButton btnListCom;
    private javax.swing.JComboBox<Coleccion> cmbColeccion;
    private javax.swing.JComboBox<Comic> cmbComic;
    private javax.swing.JButton cmbListCol;
    // End of variables declaration//GEN-END:variables
    // USER variables declaration                     
    
    // End of USER variables declaration   

    private void loadCombos() {
        cmbComic.removeAllItems();
        cmbColeccion.removeAllItems();
        gestionLib.loadComboBox(cmbComic, gestionCom.getComics(null));
        gestionLib.loadComboBox(cmbColeccion, gestionCol.getColecciones());
    }

    private void listadoComics() {
        try {
            Conexion.open();
            System.out.println(directorioInformes);
            String informeJRWML = directorioInformes.concat("/ListadoComics.jrxml");

            // Compilar informe en una suerte de c√≥digo intermedio
            JasperReport jasperReport = JasperCompileManager.compileReport(informeJRWML);

            // Rellenar informe. La tercera variable, EmptyDataSource, es el equivalente a no pasarle nada... pero ha de ser de este modo.
            JasperPrint impresion = JasperFillManager.fillReport(jasperReport, null, Conexion.getConnection());

            // Imprimir informe por pantalla
            JasperViewer jasperViewer = new JasperViewer(impresion, false);
            JDialog dialog = new JDialog(this);//the owner
            dialog.setContentPane(jasperViewer.getContentPane());
            dialog.setSize(jasperViewer.getSize());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            //JasperViewer.viewReport(impresion, false);
        } catch (JRException e) {
            System.err.println("ERROOOOOR: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        } finally {
            Conexion.close();
        }
    }

    private void listadoColecciones() {
        try {
            Conexion.open();
            String informeJRWML = directorioInformes.concat("/ListadoColecciones.jrxml");

            // Compilar informe en una suerte de c√≥digo intermedio
            JasperReport jasperReport = JasperCompileManager.compileReport(informeJRWML);

            // Rellenar informe. La tercera variable, EmptyDataSource, es el equivalente a no pasarle nada... pero ha de ser de este modo.
            JasperPrint impresion = JasperFillManager.fillReport(jasperReport, null, Conexion.getConnection());

            // Imprimir informe por pantalla
            JasperViewer jasperViewer = new JasperViewer(impresion, false);
            JDialog dialog = new JDialog(this);//the owner
            dialog.setContentPane(jasperViewer.getContentPane());
            dialog.setSize(jasperViewer.getSize());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            //JasperViewer.viewReport(impresion, false);
        } catch (JRException e) {
            System.err.println("ERROOOOOR: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        } finally {
            Conexion.close();
        }
    }

    private void mostrarComic() {
        try {
            Conexion.open();
            String informeJRWML = directorioInformes.concat("/MostrarComic.jrxml");

            // Compilar informe en una suerte de c√≥digo intermedio
            JasperReport jasperReport = JasperCompileManager.compileReport(informeJRWML);

            HashMap parametros = new HashMap();
            parametros.put("IdEjemplar", ((Comic) cmbComic.getSelectedItem()).getId_comic());

            // Rellenar informe. La tercera variable, EmptyDataSource, es el equivalente a no pasarle nada... pero ha de ser de este modo.
            JasperPrint impresion = JasperFillManager.fillReport(jasperReport, parametros, Conexion.getConnection());

            // Imprimir informe por pantalla
            JasperViewer jasperViewer = new JasperViewer(impresion, false);
            JDialog dialog = new JDialog(this);//the owner
            dialog.setContentPane(jasperViewer.getContentPane());
            dialog.setSize(jasperViewer.getSize());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            //JasperViewer.viewReport(impresion, false);
        } catch (JRException e) {
            System.err.println("ERROOOOOR: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        } finally {
            Conexion.close();
        }
    }

    private void mostrarComicPorColeccion() {
        try {
            Conexion.open();
            String informeJRWML = directorioInformes.concat("/MostrarColeccion.jrxml");

            // Compilar informe en una suerte de c√≥digo intermedio
            JasperReport jasperReport = JasperCompileManager.compileReport(informeJRWML);

            HashMap parametros = new HashMap();
            parametros.put("IdColeccion", ((Coleccion) cmbColeccion.getSelectedItem()).getIdColeccion());

            // Rellenar informe. La tercera variable, EmptyDataSource, es el equivalente a no pasarle nada... pero ha de ser de este modo.
            JasperPrint impresion = JasperFillManager.fillReport(jasperReport, parametros, Conexion.getConnection());

            // Imprimir informe por pantalla
            JasperViewer jasperViewer = new JasperViewer(impresion, false);
            JDialog dialog = new JDialog(this);//the owner
            dialog.setContentPane(jasperViewer.getContentPane());
            dialog.setSize(jasperViewer.getSize());
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);

            //JasperViewer.viewReport(impresion, false);
        } catch (JRException e) {
            System.err.println("ERROOOOOR: " + e.getMessage());
        } catch (ClassNotFoundException | SQLException ex) {
            ex.printStackTrace();
        } finally {
            Conexion.close();
        }
    }
}

package Vista.Ventanas;

import java.awt.Dimension;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import Controlador.Consultas;
import Controlador.gestionCol;
import Controlador.gestionCom;
import Controlador.gestionLib;
import Modelo.Coleccion;
import Modelo.Comic;
import Modelo.Estado;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author luisvi
 */
public class gesCom extends javax.swing.JDialog {

    /**
     * Creates new form ItemDlg
     */
    private static FileNameExtensionFilter filtro;
    private JFileChooser jfc;
    private static File file;

    public gesCom(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadCombos();
        setFileChooser();
    }

    private void setFileChooser() {
        // Desactiva la opción de crear carpeta. //
        UIManager.put("FileChooser.readOnly", true);

        jfc = new JFileChooser();
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);

        //disableNav(jfc);
        // Desactiva la opción de elegir 'Todos los archivos'. //
        jfc.setAcceptAllFileFilterUsed(false);

        // Establece un filtro para 'jpg'. //
        filtro = new FileNameExtensionFilter(".jpg", "jpg");
        jfc.setFileFilter(filtro);
    }

    private void loadCombos() {
        ArrayList<Coleccion> cols = gestionCol.getColecciones();
        ArrayList<Comic> coms = gestionCom.getComics();
        ArrayList<Estado> es = gestionLib.getEstados();
        if (cmbComic.getSelectedIndex() != -1) {
            cmbComic.removeAllItems();
        }
        if (cmbCol.getSelectedIndex() != -1) {
            cmbCol.removeAllItems();
        }
        if (cmbEstado.getSelectedIndex() != -1) {
            cmbEstado.removeAllItems();
        }
        if (!coms.isEmpty()) {
            gestionLib.loadComboBox(cmbComic, coms);
        }
        if (!cols.isEmpty()) {
            gestionLib.loadComboBox(cmbCol, cols);
            
        }
        if (!es.isEmpty()) {
            gestionLib.loadComboBox(cmbEstado, es);
        }
        
        Comic com = cmbComic.getItemAt(cmbComic.getSelectedIndex());
        
        for (int i = 0; i < cmbEstado.getItemCount(); i++) {
            if (((Estado) cmbEstado.getItemAt(i)).getIdEstado() == com.getEstado().getIdEstado()) {
                cmbEstado.setSelectedIndex(i);
            }
        }
        
        for (int i = 0; i < cmbCol.getItemCount(); i++) {
            if (((Coleccion) cmbCol.getItemAt(i)).getIdColeccion() == com.getColeccion().getIdColeccion()) {
                cmbCol.setSelectedIndex(i);
            }
        }
        
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtTitulo = new javax.swing.JTextField();
        txtNumero = new javax.swing.JTextField();
        txtPaginas = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        cmbEstado = new javax.swing.JComboBox<>();
        cmbCol = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblCover = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler10 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler11 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler12 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        filler13 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        btnChangeCover = new javax.swing.JButton();
        btnDeleteCover = new javax.swing.JButton();
        filler14 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jLabel7 = new javax.swing.JLabel();
        cmbComic = new javax.swing.JComboBox<>();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion Comic");
        setMaximumSize(new java.awt.Dimension(1920, 1200));
        setMinimumSize(new java.awt.Dimension(671, 636));
        setPreferredSize(new java.awt.Dimension(657, 597));
        setSize(new java.awt.Dimension(671, 636));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        btnUpdate.setText("Editar");
        btnUpdate.setMaximumSize(new java.awt.Dimension(100, 25));
        btnUpdate.setMinimumSize(new java.awt.Dimension(100, 25));
        btnUpdate.setPreferredSize(new java.awt.Dimension(100, 25));
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        getContentPane().add(btnUpdate, gridBagConstraints);

        btnDelete.setText("Borrar");
        btnDelete.setMaximumSize(new java.awt.Dimension(100, 25));
        btnDelete.setMinimumSize(new java.awt.Dimension(100, 25));
        btnDelete.setPreferredSize(new java.awt.Dimension(100, 25));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        getContentPane().add(btnDelete, gridBagConstraints);

        txtTitulo.setMaximumSize(new java.awt.Dimension(100, 25));
        txtTitulo.setMinimumSize(new java.awt.Dimension(100, 25));
        txtTitulo.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 412;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        getContentPane().add(txtTitulo, gridBagConstraints);

        txtNumero.setText("0");
        txtNumero.setMaximumSize(new java.awt.Dimension(200, 25));
        txtNumero.setMinimumSize(new java.awt.Dimension(200, 25));
        txtNumero.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(txtNumero, gridBagConstraints);

        txtPaginas.setText("0");
        txtPaginas.setMaximumSize(new java.awt.Dimension(200, 25));
        txtPaginas.setMinimumSize(new java.awt.Dimension(200, 25));
        txtPaginas.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        getContentPane().add(txtPaginas, gridBagConstraints);

        txtPrecio.setText("0");
        txtPrecio.setMaximumSize(new java.awt.Dimension(200, 25));
        txtPrecio.setMinimumSize(new java.awt.Dimension(200, 25));
        txtPrecio.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(txtPrecio, gridBagConstraints);

        cmbEstado.setMaximumSize(new java.awt.Dimension(200, 25));
        cmbEstado.setMinimumSize(new java.awt.Dimension(200, 25));
        cmbEstado.setPreferredSize(new java.awt.Dimension(200, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        getContentPane().add(cmbEstado, gridBagConstraints);

        cmbCol.setMaximumSize(new java.awt.Dimension(100, 25));
        cmbCol.setMinimumSize(new java.awt.Dimension(100, 25));
        cmbCol.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 206;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(cmbCol, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("COLECCIÓN");
        jLabel4.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel4.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel4.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 206;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel4, gridBagConstraints);

        jLabel1.setText("Título:");
        jLabel1.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel1.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel1, gridBagConstraints);

        jLabel2.setText("Número:");
        jLabel2.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel2.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel2.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel2, gridBagConstraints);

        jLabel5.setText("Páginas:");
        jLabel5.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel5.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel5.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel5, gridBagConstraints);

        jLabel3.setText("Precio:");
        jLabel3.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel3.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel3, gridBagConstraints);

        jLabel6.setText("Estado:");
        jLabel6.setMaximumSize(new java.awt.Dimension(100, 25));
        jLabel6.setMinimumSize(new java.awt.Dimension(100, 25));
        jLabel6.setPreferredSize(new java.awt.Dimension(100, 25));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel6, gridBagConstraints);

        lblCover.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        lblCover.setMaximumSize(new Dimension(Consultas.COVER_WIDTH, Consultas.COVER_HEIGHT));
        lblCover.setMinimumSize(new Dimension(Consultas.COVER_WIDTH, Consultas.COVER_HEIGHT));
        lblCover.setPreferredSize(new Dimension(Consultas.COVER_WIDTH, Consultas.COVER_HEIGHT));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 4;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(lblCover, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 6);
        getContentPane().add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler9, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler10, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler11, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler12, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.weighty = 0.1;
        getContentPane().add(filler13, gridBagConstraints);

        btnChangeCover.setText("Cambiar portada");
        btnChangeCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeCoverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
        getContentPane().add(btnChangeCover, gridBagConstraints);

        btnDeleteCover.setText("Borrar portada");
        btnDeleteCover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCoverActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(btnDeleteCover, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.weighty = 0.5;
        getContentPane().add(filler14, gridBagConstraints);

        jLabel7.setText("Comic: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 0, 0);
        getContentPane().add(jLabel7, gridBagConstraints);

        cmbComic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbComicItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 0, 6, 6);
        getContentPane().add(cmbComic, gridBagConstraints);

        btnSave.setText("Guardar");
        btnSave.setMaximumSize(new java.awt.Dimension(100, 25));
        btnSave.setMinimumSize(new java.awt.Dimension(100, 25));
        btnSave.setPreferredSize(new java.awt.Dimension(100, 25));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 50;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 0);
        getContentPane().add(btnSave, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnChangeCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeCoverActionPerformed
        chooseCover();
    }//GEN-LAST:event_btnChangeCoverActionPerformed

    private void btnDeleteCoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCoverActionPerformed
        clearCover();
    }//GEN-LAST:event_btnDeleteCoverActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if (!txtTitulo.getText().isEmpty() && !txtNumero.getText().isEmpty()
                && !txtPrecio.getText().isEmpty() && !txtPaginas.getText().isEmpty()
                && lblCover.getIcon() != null && cmbCol.getSelectedIndex() != -1) {
            guardarComic();
            loadCombos();
        } else {
            JOptionPane.showMessageDialog(this, "Alguno de los campos obligatorios no estan rellenado o puede que no haya ninguna coleccion en la base de datos");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if (cmbComic.getSelectedIndex() != -1 && !txtTitulo.getText().isEmpty() && !txtNumero.getText().isEmpty()
                && !txtPrecio.getText().isEmpty() && !txtPaginas.getText().isEmpty()
                && lblCover.getIcon() != null && cmbCol.getSelectedIndex() != -1) {
            editarComic();
            loadCombos();
        } else {
            JOptionPane.showMessageDialog(this, "Alguno de los campos obligatorios no estan rellenado o puede que no haya ninguna coleccion y/o comic en la base de datos");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (cmbComic.getSelectedIndex() != -1) {
            borrarComic();
            loadCombos();
        } else {
            JOptionPane.showMessageDialog(this, "No hay ningun comic en la base de datos");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void cmbComicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbComicItemStateChanged
        if (cmbComic.getSelectedIndex() != -1) {
            Comic com = cmbComic.getItemAt(cmbComic.getSelectedIndex());
            txtTitulo.setText(com.getTitulo());
            txtNumero.setText(com.getNumero_coleccion() + "");
            txtPrecio.setText(com.getPrecio() + "");
            txtPaginas.setText(com.getPaginas() + "");

            for (int i = 0; i < cmbEstado.getItemCount(); i++) {
                if (((Estado) cmbEstado.getItemAt(i)).getIdEstado() == com.getEstado().getIdEstado()) {
                    cmbEstado.setSelectedIndex(i);
                }
            }
            for (int i = 0; i < cmbCol.getItemCount(); i++) {
                if (((Coleccion) cmbCol.getItemAt(i)).getIdColeccion() == com.getColeccion().getIdColeccion()) {
                    cmbCol.setSelectedIndex(i);
                }
            }

            if (com.getPortada() != null) {
                try {
                    gestionLib.setImage(com.getPortada().getBinaryStream(), lblCover);
                } catch (SQLException ex) {
                    Logger.getLogger(gesCom.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            txtTitulo.setText("");
            txtNumero.setText(0 + "");
            txtPrecio.setText(0 + "");
            txtPaginas.setText(0 + "");
            lblCover.setIcon(null);
        }

    }//GEN-LAST:event_cmbComicItemStateChanged

    private void chooseCover() {
        int selected = jfc.showOpenDialog(this);
        if (selected == JFileChooser.APPROVE_OPTION) {
            file = jfc.getSelectedFile();
            try {
                gestionLib.setImage(new FileInputStream(file), lblCover);
            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            }
        }
    }

    private void clearCover() {
        if (lblCover.getIcon() != null) {
            lblCover.setIcon(null);
        }
    }

    private void guardarComic() {
        Comic comic = null;
        //Var
        String titulo = txtTitulo.getText();
        int numero = Integer.parseInt(txtNumero.getText());
        int paginas = Integer.parseInt(txtPaginas.getText());
        double precio = Double.parseDouble(txtPrecio.getText());
        Coleccion col = cmbCol.getItemAt(cmbCol.getSelectedIndex());
        Estado estado = cmbEstado.getItemAt(cmbEstado.getSelectedIndex());
        Date d = new Date();
        java.sql.Date date = new java.sql.Date(d.getTime());
        byte[] portada_byte = null;
        portada_byte = gestionLib.getImage(lblCover);
        //
        comic = new Comic(col, titulo, date, numero, paginas, precio, portada_byte, estado);
        gestionCom.insertEjemplar(comic);
    }

    private void editarComic() {
        Comic comic = cmbComic.getItemAt(cmbComic.getSelectedIndex());
        //Var
        String titulo = txtTitulo.getText();
        int numero = Integer.parseInt(txtNumero.getText());
        int paginas = Integer.parseInt(txtPaginas.getText());
        double precio = Double.parseDouble(txtPrecio.getText());
        Coleccion col = cmbCol.getItemAt(cmbCol.getSelectedIndex());
        Estado estado = cmbEstado.getItemAt(cmbEstado.getSelectedIndex());
        byte[] portada_byte = null;
        portada_byte = gestionLib.getImage(lblCover);
        //Sets
        comic.setTitulo(titulo);
        comic.setNumero_coleccion(numero);
        comic.setPaginas(paginas);
        comic.setPrecio(precio);
        comic.setColeccion(col);
        comic.setEstado(estado);
        comic.setPortada_byte(portada_byte);
        //
        gestionCom.updateComic(comic);
    }

    private void borrarComic() {
        Comic comic = cmbComic.getItemAt(cmbComic.getSelectedIndex());
        gestionCom.deleteComic(comic);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gesCom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gesCom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gesCom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gesCom.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                gesCom dialog = new gesCom(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeCover;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteCover;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Coleccion> cmbCol;
    private javax.swing.JComboBox<Comic> cmbComic;
    private javax.swing.JComboBox<Estado> cmbEstado;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler10;
    private javax.swing.Box.Filler filler11;
    private javax.swing.Box.Filler filler12;
    private javax.swing.Box.Filler filler13;
    private javax.swing.Box.Filler filler14;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblCover;
    private javax.swing.JTextField txtNumero;
    private javax.swing.JTextField txtPaginas;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtTitulo;
    // End of variables declaration//GEN-END:variables
    // USER variables declaration
}
